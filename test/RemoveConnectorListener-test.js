
const cloudApi = require("remote-pay-cloud-api").remotepay;

const WebsocketCloudCloverDevice = require("../dist/com/clover/remote/client/device/WebsocketCloudCloverDevice").WebsocketCloudCloverDevice;
const WebSocketPairedCloverDeviceConfiguration = require("../dist/com/clover/remote/client/device/WebSocketPairedCloverDeviceConfiguration").WebSocketPairedCloverDeviceConfiguration;
const ImageUtil = require("../dist/com/clover/util/ImageUtil").ImageUtil;
const BrowserWebSocketImpl = require("../dist/com/clover/websocket/BrowserWebSocketImpl").BrowserWebSocketImpl;

const CloverConnectorFactoryBuilder = require("../dist/com/clover/remote/client/CloverConnectorFactoryBuilder").CloverConnectorFactoryBuilder;

/**
 * Validates request payloads generated by remote-pay-cloud against golden data.
 * Test case files located in ./unit-tests/request-validation.
 */
describe('RemoveConnectorListener()', function () {

    const remoteApplicationID = "remote-pay-cloud-test";
    let device, cloverConnector, cloverConnectorListener = null;

    before(function () {
        getConnector();
    });


    let buildCloverConnectionListener = function (cloverConnector) {
        return Object.assign({}, cloudApi.ICloverConnectorListener.prototype, {

            onDeviceReady: function (merchantInfo) {
                console.log({message: "Device Ready to process requests!", merchantInfo: merchantInfo});
            },

            onDeviceDisconnected: function () {
                console.log({message: "Disconnected"});
            },

            onDeviceConnected: function () {
                console.log({message: "Connected, but not available to process requests"});
            }

        });
    };

    /**
     * Set's the Device/Connector used for all test cases.
     */
    let getConnector = function () {
        const deviceConfiguration = new WebSocketPairedCloverDeviceConfiguration("unknown", remoteApplicationID, "unknown", "unknown", null, BrowserWebSocketImpl.createInstance, new ImageUtil());
        // Because we aren't making a valid WebSocket connection remote-pay-cloud will log errors to the console
        // upon device instantiation. Store console.log and then set it to an no-op function to
        // prevent these errors from being logged.
        const log = console.log;
        console.log = () => {
            // no-op, prevents WS connection errors, etc. from being logged to the console.
        };
        device = new WebsocketCloudCloverDevice(deviceConfiguration);

        let builderConfiguration = {};
        builderConfiguration[CloverConnectorFactoryBuilder.FACTORY_VERSION] = CloverConnectorFactoryBuilder.VERSION_12;
        let cloverConnectorFactory = CloverConnectorFactoryBuilder.createICloverConnectorFactory(builderConfiguration);
        cloverConnector = cloverConnectorFactory.createICloverConnector(deviceConfiguration);
        cloverConnectorListener = buildCloverConnectionListener(cloverConnector);
        cloverConnector.addCloverConnectorListener(cloverConnectorListener);
        cloverConnector.initializeConnection();

        // Reset console.log, now we want messages in the console!
        console.log = log;
    };

    it(`test removeCloverConnectorListener`, function (done) {
        cloverConnector.removeCloverConnectorListener(cloverConnectorListener);
        cloverConnector.showMessage("message");

        done();
    });

});

