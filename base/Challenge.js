/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var order_VoidReason = require("../order/VoidReason");
var base_ChallengeType = require("../base/ChallengeType");

  /**
  * @constructor
  */
  Challenge = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = Challenge;
      this.type = undefined;
      this.reason = undefined;
      this.message = undefined;
    },

    /**
    * Set the field value
    * The type of the challenge.
    *
    * @param {ChallengeType} type 
    */
    setType: function(type) {
      this.type = type;
    },

    /**
    * Get the field value
    * The type of the challenge.
      * @return {ChallengeType} 
    */
    getType: function() {
      return this.type;
    },

    /**
    * Set the field value
    * If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
    *
    * @param {VoidReason} reason 
    */
    setReason: function(reason) {
      this.reason = reason;
    },

    /**
    * Get the field value
    * If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
      * @return {VoidReason} 
    */
    getReason: function() {
      return this.reason;
    },

    /**
    * Set the field value
    * A default message that indicates what the challenge is in a user friendly format.
    *
    * @param {String} message 
    */
    setMessage: function(message) {
      this.message = message;
    },

    /**
    * Get the field value
    * A default message that indicates what the challenge is in a user friendly format.
      * @return {String} 
    */
    getMessage: function() {
      return this.message;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Challenge._meta_ =  {fields:  {}};
Challenge._meta_.fields["type"] = {};
Challenge._meta_.fields["type"].type = base_ChallengeType;
Challenge._meta_.fields["reason"] = {};
Challenge._meta_.fields["reason"].type = order_VoidReason;
Challenge._meta_.fields["message"] = {};
Challenge._meta_.fields["message"].type = String;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Challenge;
}

