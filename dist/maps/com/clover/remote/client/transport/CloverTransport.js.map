{"version":3,"sources":["com/clover/remote/client/transport/CloverTransport.ts"],"names":[],"mappings":";;AAGA;;;;;GAKG;AACH;IAUC;QATA,8BAA8B;QACpB,cAAS,GAA8B,EAAE,CAAC;QAKpD,2CAA2C;QACjC,UAAK,GAAY,KAAK,CAAC;IAGjC,CAAC;IAED;;OAEG;IACO,+CAAqB,GAA/B;QAAA,iBAIC;QAHA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,GAAG,CAAC,iBAAiB,CAAC,KAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,2CAAiB,GAA3B;QAAA,iBAKC;QAJA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,GAAG,CAAC,aAAa,CAAC,KAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,kDAAwB,GAAlC;QAAA,iBAKC;QAJA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,GAAG,CAAC,oBAAoB,CAAC,KAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACO,mCAAS,GAAnB,UAAoB,OAAe;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1B,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAUD;;;;OAIG;IACI,mCAAS,GAAhB,UAAiB,QAAiC;QAAlD,iBAOC;QANA,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;gBAC1B,GAAG,CAAC,aAAa,CAAC,KAAI,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACI,qCAAW,GAAlB,UAAmB,QAAiC;QACnD,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;IACF,CAAC;IAED;;OAEG;IACI,wCAAc,GAArB;QACC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAGM,gDAAsB,GAA7B,UAA8B,mBAAwC;QACrE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IAChD,CAAC;IAMF,sBAAC;AAAD,CAxGA,AAwGC,IAAA;AAxGqB,0CAAe","file":"../../../../../../com/clover/remote/client/transport/CloverTransport.js","sourcesContent":["import {CloverTransportObserver} from './CloverTransportObserver';\nimport {ObjectMessageSender} from './ObjectMessageSender';\n\n/**\n * Clover Transport\n * \n * The clover transport facilitates notification distribution\n * from the device to a list of observers.\n */\nexport abstract class CloverTransport {\n\t// List of observers to notify\n\tprotected observers: CloverTransportObserver[] = [];\n\n\t// Used to send remote messages, like pairing messages\n\tprotected objectMessageSender: ObjectMessageSender;\n\n\t// Flag to determine if the device is ready\n\tprotected ready: Boolean = false;\n\n\tconstructor() {\n\t}\n\n\t/**\n\t * Notify observers that the device is connected\n\t */\n\tprotected notifyDeviceConnected(): void {\n\t\tthis.observers.forEach((obs) => {\n\t\t\tobs.onDeviceConnected(this);\n\t\t});\n\t}\n\n\t/**\n\t * Notify observers that the device is ready\n\t */\n\tprotected notifyDeviceReady(): void {\n\t\tthis.ready = true;\n\t\tthis.observers.forEach((obs) => {\n\t\t\tobs.onDeviceReady(this);\n\t\t});\n\t}\n\n\t/**\n\t * Notify observers that the device has disconnected\n\t */\n\tprotected notifyDeviceDisconnected(): void {\n\t\tthis.ready = false;\n\t\tthis.observers.forEach((obs) => {\n\t\t\tobs.onDeviceDisconnected(this);\n\t\t});\n\t}\n\n\t/**\n\t * Should be called by subclasses (_super.onMessage) when a message is received\n\t * in order to forward to all observers\n\t * \n\t * @param {string} message - The message we received\n\t */\n\tprotected onMessage(message: string): void {\n\t\tthis.observers.forEach((obs) => {\n\t\t\tobs.onMessage(message);\n\t\t});\n\t}\n\n\t/**\n\t * Send a message\n\t * \n\t * @param {string} message - the message to send\n\t * @return int - status indicator of 0 or -1 where 0 is success and -1 is failure\n\t */\n\tpublic abstract sendMessage(message: string): number;\n\n\t/**\n\t * Add new observer to receive notifications from the device\n\t * \n\t * @param {CloverTransportObserver} observer - the observer to notify\n\t */\n\tpublic subscribe(observer: CloverTransportObserver): void {\n\t\tif (this.ready) {\n\t\t\tthis.observers.forEach((obs) => {\n\t\t\t\tobs.onDeviceReady(this);\n\t\t\t});\n\t\t}\n\t\tthis.observers.push(observer);\n\t}\n\n\t/**\n\t * Remove an observer from the list of observers\n\t * \n\t * @param {CloverTransportObserver} observer - the observer to remove\n\t */\n\tpublic unsubscribe(observer: CloverTransportObserver): void {\n\t\tvar indexOfObserver = this.observers.indexOf(observer);\n\t\tif (indexOfObserver !== -1) {\n\t\t\tthis.observers.splice(indexOfObserver, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Clear the observers list\n\t */\n\tpublic clearListeners(): void {\n\t\tthis.observers.splice(0, this.observers.length);\n\t}\n\n\n\tpublic setObjectMessageSender(objectMessageSender: ObjectMessageSender): void {\n\t\tthis.objectMessageSender = objectMessageSender;\n\t}\n\n\t/**\n\t * Properly dispose of this object\n\t */\n\tpublic abstract dispose(): void;\n}\n"]}