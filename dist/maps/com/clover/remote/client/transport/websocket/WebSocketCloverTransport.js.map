{"version":3,"sources":["com/clover/remote/client/transport/websocket/WebSocketCloverTransport.ts"],"names":[],"mappings":"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","file":"../../../../../../../com/clover/remote/client/transport/websocket/WebSocketCloverTransport.js","sourcesContent":["import sdk = require('remote-pay-cloud-api');\nimport {PairingDeviceConfiguration} from '../PairingDeviceConfiguration';\nimport {CloverDeviceConfiguration} from '../../device/CloverDeviceConfiguration';\nimport {CloverDevice} from '../../device/CloverDevice';\nimport {CloverWebSocketClient} from './CloverWebSocketClient';\n// import MethodToMessage = require('../../../../util/MethodToMessage.js');\n\nimport CloverID = require('../../../../../../../CloverID');\nimport {CloverTransport} from '../CloverTransport';\nimport {Logger} from '../../util/Logger';\nimport http = require('http');\nimport {CloverWebSocketClientListener} from \"./CloverWebSocketClientListener\";\nimport {CloverTransportObserver} from '../CloverTransportObserver';\nimport {WebSocketCloverDeviceConfiguration} from \"../../device/WebSocketCloverDeviceConfiguration\";\n\n/**\n * WebSocket Clover Transport\n * \n * This is a websocket implementation of the Clover Transport.\n */\nexport class WebSocketCloverTransport extends CloverTransport implements CloverWebSocketClientListener {\n\n\t// Create a logger\n\tprivate logger: Logger = Logger.create();\n\n\tprivate posName: string;\n\tprivate serialNumber: string;\n\tprivate authToken: string;\n\n\tprivate reconnectDelay: number = 3000;\n\tendpoint: string;\n\n\tpairingDeviceConfiguration: PairingDeviceConfiguration; // Network Pay display specific\n\n\twebSocket: CloverWebSocketClient;\n\twebSocketImplClass: any;\n\n\tstatus: string = \"Disconnected\";\n\t/**\n\t * prevent reconnects if shutdown was requested\n\t */\n\tshutdown: boolean = false;\n\n\t// KeyStore trustStore; // nope, browser handled.\n\n\tisPairing: boolean = true;\n\n\tdevice: CloverDevice;\n\n\t/**\n\t * A single thread/queue to process reconnect requests\n\t */\n\t// ScheduledThreadPoolExecutor reconnectPool = new ScheduledThreadPoolExecutor(1);\n\n\n\treconnector = function() {\n        if (!this.shutdown) {\n            try {\n                this.initialize(this.endpoint);\n            } catch (e) {\n                this.reconnect();\n            }\n        }\n    }.bind(this);\n\n    public reconnect(): void {\n        if (this.shutdown) {\n            this.logger.debug(\"Not attempting to reconnect, shutdown...\");\n            return;\n        }\n        setTimeout(this.reconnector, this.reconnectDelay);\n    }\n\n    public static METHOD: string = \"method\";\n\tpublic static PAYLOAD: string = \"payload\";\n\n    public constructor(endpoint:string,\n                       heartbeatInterval:number,\n                       reconnectDelay:number,\n                       retriesUntilDisconnect:number,\n                       posName:string,\n                       serialNumber:string,\n                       authToken:string,\n                       webSocketImplClass:any,\n                       friendlyId?:string,\n                       allowOvertakeConnection?:boolean) {\n\t//public constructor(deviceConfiguration: WebSocketCloverDeviceConfiguration) {\n\t\tsuper();  // implicit?\n\t\tthis.endpoint = endpoint;\n\t\t// this.heartbeatInterval = Math.max(10, heartbeatInterval);\n\t\tthis.reconnectDelay = Math.max(0, reconnectDelay);\n\t\t// this.maxPingRetriesBeforeDisconnect = Math.max(0, retriesUntilDisconnect);\n\t\tthis.posName = posName;\n\t\tthis.serialNumber = serialNumber;\n\t\tthis.authToken = authToken;\n\t\tthis.webSocketImplClass = webSocketImplClass;\n\n\t\tthis.initialize(this.endpoint);\n\t}\n\n\tpublic sendMessage(message: string): number {\n\t\t// let's see if we have connectivity\n\n\t\tif(this.webSocket != null && this.webSocket.isOpen()) {\n\t\t\ttry {\n\t\t\t\tthis.webSocket.send(message);\n\t\t\t} catch(e){\n\t\t\t\tthis.reconnect();\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n            this.reconnect();\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate clearWebsocket(): void { // synchronized\n\t\tif (this.webSocket != null) {\n\t\t\tthis.webSocket.clearListener();\n\t\t}\n\t\tthis.webSocket = null;\n\t}\n\n\tprivate initialize(deviceEndpoint: string): void  { // synchronized\n\n\t\tif (this.webSocket != null) {\n\t\t\tif (this.webSocket.isOpen() || this.webSocket.isConnecting()) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.clearWebsocket();\n\t\t\t}\n\t\t}\n\n\t\tthis.webSocket = new CloverWebSocketClient(deviceEndpoint, this, 5000, this.webSocketImplClass);\n\n\t\tthis.webSocket.connect();\n\t\tthis.logger.debug('connection attempt done.');\n\t}\n\n\tpublic dispose():void {\n\t\tthis.shutdown = true;\n\t\tif (this.webSocket != null) {\n\t\t\tthis.notifyDeviceDisconnected();\n\t\t\ttry {\n\t\t\t\tthis.webSocket.close();\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error('error disposing of transport.', e);\n\t\t\t}\n\t\t}\n\t\tthis.clearWebsocket();\n\t}\n\n\tpublic connectionError(ws: CloverWebSocketClient):void {\n\t\tthis.logger.debug('Not Responding...');\n\n\t\tif (this.webSocket == ws) {\n\t\t\tfor (let observer of this.observers) {\n\t\t\t\tthis.logger.debug('onConnectionError');\n\t\t\t\tobserver.onDeviceDisconnected(this);\n\t\t\t}\n\t\t}\n\t\t// this.reconnect();\n\t}\n\n\tpublic onNotResponding(ws: CloverWebSocketClient): void {\n\t\tthis.logger.debug('Not Responding...');\n\t\tif (this.webSocket == ws) {\n\t\t\tfor (let observer of this.observers) {\n\t\t\t\tthis.logger.debug('onNotResponding');\n\t\t\t\tobserver.onDeviceDisconnected(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic onPingResponding(ws: CloverWebSocketClient): void {\n\t\tthis.logger.debug(\"Ping Responding\");\n\t\tif (this.webSocket == ws) {\n\t\t\tfor (let observer of this.observers) {\n\t\t\t\tthis.logger.debug(\"onPingResponding\");\n\t\t\t\tobserver.onDeviceReady(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic onOpen(ws: CloverWebSocketClient): void {\n\n\t\tthis.logger.debug(\"Open...\");\n\t\tif (this.webSocket == ws) {\n\t\t\t// notify connected\n\t\t\tthis.notifyDeviceConnected();\n\t\t\tthis.sendPairRequest();\n\t\t}\n\t}\n\n\tprivate sendPairRequest(): void {\n\t\tthis.isPairing = true;\n        let prm: sdk.remotemessage.PairingRequestMessage = new sdk.remotemessage.PairingRequestMessage();\n\t\tprm.setName(this.posName);\n\t\tprm.setSerialNumber(this.serialNumber);\n\t\tprm.setApplicationName(this.posName);\n\t\tprm.setAuthenticationToken(this.authToken);\n\n\t\tthis.objectMessageSender.sendObjectMessage(prm);\n\t}\n\n    public onClose(ws: CloverWebSocketClient, code: number, reason: string, remote: boolean): void {\n        this.logger.debug(\"onClose: \" + reason + \", remote? \" + remote);\n\n        if (this.webSocket == ws) {\n            if(!this.webSocket.isClosing()) {\n\t\t\t\tthis.webSocket.clearListener();\n\t\t\t\tthis.webSocket.close();\n            }\n\t\t\tthis.clearWebsocket();\n            for (let observer of this.observers) {\n                this.logger.debug(\"onClose\");\n                observer.onDeviceDisconnected(this);\n            }\n            if(!this.shutdown) {\n\t\t\t\tthis.reconnect();\n            }\n        }\n    }\n\n    //private extractPayloadFromRemoteMessageJson(remoteMessageJson): any {\n    //    // Get the sdk.remotemessage.Message type for this message\n    //    var responseMessageType = MethodToMessage[remoteMessageJson.getMethod()];\n    //    // Create an instance of the message\n    //    var remotemessageMessage = new responseMessageType;\n    //    // Populate the message using the remoteMessageJson, which is a json object that is a\n    //    // sdk.remotemessage.RemoteMessage\n    //    this.remoteMessageParser.parseMessage(message, remotemessageMessage);\n    //    // remotemessageMessage is a sdk.remotemessage.Message that is populated.\n    //    return remotemessageMessage;\n    //}\n\n\n    /**\n     * Messed up way ts/js does function overloading\n     *\n     * @param ws\n     * @param message\n     */\n    public onMessage(ws: CloverWebSocketClient, message: string): void;\n    public onMessage(message: string): void;\n    public onMessage(wsOrMessage: any, messageOnly?: string): void {\n        if (typeof wsOrMessage == 'string') {\n            super.onMessage(wsOrMessage);\n        } else {\n            this.onMessage_cwscl(wsOrMessage, messageOnly);\n        }\n    }\n\n    public onMessage_cwscl(ws: CloverWebSocketClient, message: string): void { // CloverWebSocketClientListener\n        if (this.webSocket == ws) {\n            if(this.isPairing) {\n                var remoteMessageJson = JSON.parse(message);\n                // var remoteMessage: sdk.remotemessage.Message = this.extractPayloadFromRemoteMessageJson(remoteMessageJson);\n\n                if (sdk.remotemessage.METHOD.PAIRING_CODE.equals(remoteMessageJson.method)) {\n                    this.logger.debug(\"Got PAIRING_CODE\");\n                    var pcm: sdk.remotemessage.PairingCodeMessage = <sdk.remotemessage.PairingCodeMessage>JSON.parse(remoteMessageJson.payload);\n                    var pairingCode:string = pcm.getPairingCode();\n                    this.pairingDeviceConfiguration.onPairingCode(pairingCode);\n                } else if (sdk.remotemessage.METHOD.PAIRING_RESPONSE.equals(remoteMessageJson.getMethod())) {\n                    this.logger.debug(\"Got PAIRING_RESPONSE\");\n                    var response: sdk.remotemessage.PairingResponse = <sdk.remotemessage.PairingResponse>JSON.parse(remoteMessageJson.payload);\n                    if (sdk.remotemessage.PairingState.PAIRED.equals(response.pairingState) || sdk.remotemessage.PairingState.INITIAL.equals(response.pairingState)) {\n                        this.logger.debug(\"Got PAIRED pair response\");\n                        this.isPairing = false;\n                        this.authToken = response.authenticationToken;\n\n                        try {\n                            this.pairingDeviceConfiguration.onPairingSuccess(this.authToken);\n                        } catch (e) {\n                            this.logger.debug(\"Error:\" + e);\n                        }\n                        this.notifyDeviceReady();\n                    } else if (sdk.remotemessage.PairingState.FAILED.equals(remoteMessageJson.getMethod())) {\n                        this.logger.debug(\"Got FAILED pair response\");\n                        this.isPairing = true;\n                        this.sendPairRequest();\n                    }\n                } else if (sdk.remotemessage.METHOD.ACK != remoteMessageJson.getMethod() || sdk.remotemessage.METHOD.UI_STATE != remoteMessageJson.getMethod()) {\n                    this.logger.debug(\"Unexpected method: '\" + remoteMessageJson.getMethod() + \"' while in pairing mode.\");\n                }\n            } else {\n                for (let observer of this.observers) {\n                    this.logger.debug(\"Got message: \" + message);\n                    observer.onMessage(message);\n                }\n            }\n        }\n    }\n\n    public onSendError(payloadText: string): void {\n        // TODO:\n        /*for (let observer of this.observers) {\n         CloverDeviceErrorEvent errorEvent = new CloverDeviceErrorEvent();\n         }*/\n    }\n\n    public setPairingDeviceConfiguration(pairingDeviceConfiguration: PairingDeviceConfiguration): void {\n        this.pairingDeviceConfiguration = pairingDeviceConfiguration;\n    }\n}\n"]}