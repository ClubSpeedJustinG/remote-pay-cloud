{"version":3,"sources":["com/clover/remote/client/CloverConnectorBroadcaster.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0CAA6C;AAC7C,wCAAqC;AAErC;IAAgD,8CAA6C;IAG5F;QAAA,YACC,iBAAO,SACP;QAJO,YAAM,GAAW,eAAM,CAAC,MAAM,EAAE,CAAC;;IAIzC,CAAC;IAEM,0CAAK,GAAZ;QACC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAEM,qDAAgB,GAAvB,UAAwB,GAAW;QAAnC,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;YAClE,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,kEAA6B,GAApC,UAAqC,qBAA+D;QAApG,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;YACzD,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,mDAAc,GAArB,UAAsB,gBAAqD;QAA3E,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;YAC/C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,gEAA2B,GAAlC,UAAmC,WAAiD;QAApF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAC7C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,8DAAyB,GAAhC,UAAiC,WAAiD;QAAlF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;YAC3C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,yDAAoB,GAA3B,UAA4B,QAAyC;QAArE,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACnC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,yDAAoB,GAA3B,UAA4B,QAAyC;QAArE,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACnC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,iEAA4B,GAAnC,UAAoC,QAAiD;QAArF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,mEAA8B,GAArC,UAAsC,OAAkD;QAAxF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;QAC9E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YAC5C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,gEAA2B,GAAlC,UAAmC,QAAgD;QAAnF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAC1C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,oDAAe,GAAtB;QAAA,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,iBAAiB,EAAE,CAAC;YAC9B,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,uDAAkB,GAAzB;QAAA,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YACjC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,kDAAa,GAApB,UAAqB,YAA6C;QAAlE,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YACtC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,kEAA6B,GAApC,UAAqC,QAAkD;QAAvF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,6DAAwB,GAA/B,UAAgC,GAAyC;QAAzE,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,4DAAuB,GAA9B,UAA+B,QAA4C;QAA3E,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACtC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,2DAAsB,GAA7B,UAA8B,QAAmD;QAAjF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;QACtE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,wDAAmB,GAA1B,UAA2B,UAAqD;QAAhF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACpC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,sEAAiC,GAAxC,UAAyC,gCAAqF;QAA9H,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;QACjF,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,2BAA2B,CAAC,gCAAgC,CAAC,CAAC;YACxE,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,4EAAuC,GAA9C,UAA+C,sCAAiG;QAAhJ,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,iCAAiC,CAAC,sCAAsC,CAAC,CAAC;YACpF,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,uEAAkC,GAAzC,UAA0C,iCAAuF;QAAjI,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAClF,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,4BAA4B,CAAC,iCAAiC,CAAC,CAAC;YAC1E,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,gEAA2B,GAAlC,UAAmC,0BAAyE;QAA5G,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,CAAC;YAC5D,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,+DAA0B,GAAjC,UAAkC,+BAAmF;QAArH,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC1E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,0BAA0B,CAAC,+BAA+B,CAAC,CAAC;YACtE,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,sEAAiC,GAAxC,UAAyC,sCAAiG;QAA1I,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;QACjF,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,iCAAiC,CAAC,sCAAsC,CAAC,CAAC;YACpF,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,kEAA6B,GAApC,UAAqC,qBAA+D;QAApG,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;YACzD,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,2EAAsC,GAA7C,UAA8C,IAAwD;QAAtG,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;QACtF,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,iCAAiC,CAAC,IAAI,CAAC,CAAC;YAClD,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,iEAA4B,GAAnC,UAAoC,IAA6C;QAAjF,iBAUC;QATA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,CAAC,UAAC,QAAgD;YAC7D,IAAI,CAAC;gBACJ,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC;YACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,iCAAC;AAAD,CA9UA,AA8UC,CA9U+C,KAAK,GA8UpD;AA9UY,gEAA0B","file":"../../../../../com/clover/remote/client/CloverConnectorBroadcaster.js","sourcesContent":["import sdk = require('remote-pay-cloud-api');\nimport {Logger} from './util/Logger';\n\nexport class CloverConnectorBroadcaster extends Array<sdk.remotepay.ICloverConnectorListener> {\n\tprivate logger: Logger = Logger.create();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic clear(): void {\n\t\tthis.splice(0, this.length);\n\t}\n\n\tpublic notifyOnTipAdded(tip: number): void {\n\t\tthis.logger.debug('Sending TipAdded notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onTipAdded(new sdk.remotemessages.TipAddedMessage(tip));\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnRefundPaymentResponse(refundPaymentResponse: sdk.remotemessages.RefundPaymentResponse): void {\n\t\tthis.logger.debug('Sending RefundPaymentResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onRefundPaymentResponse(refundPaymentResponse);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyCloseout(closeoutResponse: sdk.remotemessages.CloseoutResponse): void {\n\t\tthis.logger.debug('Sending Closeout notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onCloseoutResponse(closeoutResponse);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnDeviceActivityStart(deviceEvent: sdk.remotemessages.CloverDeviceEvent): void {\n\t\tthis.logger.debug('Sending DeviceActivityStart notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceActivityStart(deviceEvent);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnDeviceActivityEnd(deviceEvent: sdk.remotemessages.CloverDeviceEvent): void {\n\t\tthis.logger.debug('Sending DeviceActivityEnd notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceActivityEnd(deviceEvent);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnSaleResponse(response: sdk.remotemessages.SaleResponse): void {\n\t\tthis.logger.debug('Sending SaleResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onSaleResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnAuthResponse(response: sdk.remotemessages.AuthResponse): void {\n\t\tthis.logger.debug('Sending AuthResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onAuthResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnManualRefundResponse(response: sdk.remotemessages.ManualRefundResponse): void {\n\t\tthis.logger.debug('Sending ManualRefundResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onManualRefundResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnVerifySignatureRequest(request: sdk.remotemessages.VerifySignatureRequest): void {\n\t\tthis.logger.debug('Sending VerifySignatureRequest notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onVerifySignatureRequest(request);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnVoidPaymentResponse(response: sdk.remotemessages.VoidPaymentResponse): void {\n\t\tthis.logger.debug('Sending VoidPaymentResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onVoidPaymentResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnConnect(): void {\n\t\tthis.logger.debug('Sending Connect notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceConnected();\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnDisconnect(): void {\n\t\tthis.logger.debug('Sending Disconnect notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceDisconnected();\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnReady(merchantInfo: sdk.remotemessages.MerchantInfo): void {\n\t\tthis.logger.debug('Sending Ready notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceReady(merchantInfo);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnTipAdjustAuthResponse(response: sdk.remotemessages.TipAdjustAuthResponse): void {\n\t\tthis.logger.debug('Sending TipAdjustAuthResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onTipAdjustAuthResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnVaultCardRespose(ccr: sdk.remotemessages.VaultCardResponse): void {\n\t\tthis.logger.debug('Sending VaultCardResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onVaultCardResponse(ccr);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPreAuthResponse(response: sdk.remotemessages.PreAuthResponse): void {\n\t\tthis.logger.debug('Sending PreAuthResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPreAuthResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnCapturePreAuth(response: sdk.remotemessages.CapturePreAuthResponse): void {\n\t\tthis.logger.debug('Sending CapturePreAuth notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onCapturePreAuthResponse(response);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnDeviceError(errorEvent: sdk.remotemessages.CloverDeviceErrorEvent): void {\n\t\tthis.logger.debug('Sending DeviceError notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onDeviceError(errorEvent);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintRefundPaymentReceipt(printRefundPaymentReceiptMessage: sdk.remotemessages.PrintRefundPaymentReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintRefundPaymentReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintRefundPaymentReceipt(printRefundPaymentReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintPaymentMerchantCopyReceipt(printPaymentMerchantCopyReceiptMessage: sdk.remotemessages.PrintPaymentMerchantCopyReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintPaymentMerchantCopyReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintPaymentMerchantCopyReceipt(printPaymentMerchantCopyReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintPaymentDeclineReceipt(printPaymentDeclineReceiptMessage: sdk.remotemessages.PrintPaymentDeclineReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintPaymentDeclineReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintPaymentDeclineReceipt(printPaymentDeclineReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintPaymentReceipt(printPaymentReceiptMessage: sdk.remotemessages.PrintPaymentReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintPaymentReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintPaymentReceipt(printPaymentReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintCreditReceipt(printManualRefundReceiptMessage: sdk.remotemessages.PrintManualRefundReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintCreditReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintManualRefundReceipt(printManualRefundReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnPrintCreditDeclineReceipt(printManualRefundDeclineReceiptMessage: sdk.remotemessages.PrintManualRefundDeclineReceiptMessage): void {\n\t\tthis.logger.debug('Sending PrintCreditDeclineReceipt notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onPrintManualRefundDeclineReceipt(printManualRefundDeclineReceiptMessage);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnConfirmPaymentRequest(confirmPaymentRequest: sdk.remotemessages.ConfirmPaymentRequest): void {\n\t\tthis.logger.debug('Sending ConfirmPaymentRequest notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onConfirmPaymentRequest(confirmPaymentRequest);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnRetrievePendingPaymentResponse(rppr: sdk.remotemessages.RetrievePendingPaymentsResponse): void {\n\t\tthis.logger.debug('Sending RetrievePendingPaymentResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onRetrievePendingPaymentsResponse(rppr);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic notifyOnReadCardDataResponse(rcdr: sdk.remotemessages.ReadCardDataResponse): void {\n\t\tthis.logger.debug('Sending ReadCardDataResponse notification to listeners');\n\t\tthis.forEach((listener: sdk.remotepay.ICloverConnectorListener) => {\n\t\t\ttry {\n\t\t\t\tlistener.onReadCardDataResponse(rcdr);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}