{"version":3,"sources":["com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.ts"],"names":[],"mappings":";;AAAA,4FAA2F;AAI3F;IAWC;;;;;;;;;;OAUG;IACH,4CAAY,QAAgB,EAAE,aAAqB,EAAE,OAAe,EAAE,YAAoB,EAAE,SAAiB,EAAE,kBAAsB,EAAE,iBAA0B,EAAE,cAAuB;QAlBlL,QAAG,GAAW,IAAI,CAAC;QACnB,sBAAiB,GAAW,IAAI,CAAC;QACjC,mBAAc,GAAW,IAAI,CAAC;QAC9B,kCAA6B,GAAW,CAAC,CAAC;QAgBjD,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,EAAE,CAAC,CAAC,iBAAiB,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QACjF,EAAE,CAAC,CAAC,cAAc,CAAC;YAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACzE,CAAC;IAEM,6DAAgB,GAAvB;QACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEM,iEAAoB,GAA3B;QACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAC/B,CAAC;IAEM,iEAAoB,GAA3B,UAA4B,iBAAyB;QACpD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC5C,CAAC;IAEM,8DAAiB,GAAxB;QACC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IAEM,8DAAiB,GAAxB,UAAyB,cAAsB;QAC9C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACtC,CAAC;IAEM,6EAAgC,GAAvC;QACC,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC;IAC3C,CAAC;IAEM,6EAAgC,GAAvC,UAAwC,6BAAqC;QAC5E,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;IACpE,CAAC;IAEM,oEAAuB,GAA9B;QACC,MAAM,CAAC,qBAAqB,CAAC;IAC9B,CAAC;IAEM,kEAAqB,GAA5B;QACC,MAAM,CAAC,0CAA0C,CAAC;IACnD,CAAC;IAEM,oDAAO,GAAd;QACC,MAAM,CAAC,mCAAmC,CAAC;IAC5C,CAAC;IAEM,+DAAkB,GAAzB;QACC,MAAM,CAAC,IAAI,mDAAwB,CAClC,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,6BAA6B,EAClC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC3B,CAAC;IACF,yCAAC;AAAD,CApFA,AAoFC,IAAA;AApFqB,gFAAkC","file":"../../../../../../com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.js","sourcesContent":["import { WebSocketCloverTransport } from '../transport/websocket/WebSocketCloverTransport';\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {CloverDeviceConfiguration} from './CloverDeviceConfiguration';\n\nexport abstract class WebSocketCloverDeviceConfiguration implements CloverDeviceConfiguration {\n\tprivate posName: string;\n\tprivate serialNumber: string;\n\tprivate authToken: string;\n\tprivate uri: string = null;\n\tprivate heartbeatInterval: number = 1000;\n\tprivate reconnectDelay: number = 3000;\n\tprivate pingRetryCountBeforeReconnect: number = 4;\n\tprivate appId: string;\n\tprivate webSocketImplClass: any;\n\n\t/**\n\t *\n\t * @param {string} endpoint - the endpoint of the Clover device. e.g. wss://192.168.1.15:12345/remote_pay\n\t * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1\n\t * @param {string} posName - Displayed during pairing to display the POS name on the Mini. e.g. MyPOS\n\t * @param {string} serialNumber - Displayed during pairing to display the device identifier. e.g. 'Aisle 3' or 'POS-35153234'\n\t * @param {string} authToken - The authToken retrieved from a previous pairing activity, passed as an argument to onPairingSuccess. This will be null for the first connection\n\t * @param {Object} webSocketImplClass - the definition of the WebSocketInterface that will be used when connecting.\n\t * @param {number} heartbeatInterval - duration to wait for a PING before disconnecting\n\t * @param {number} reconnectDelay - duration to wait until a reconnect is attempted\n\t */\n\tconstructor(endpoint: string, applicationId: string, posName: string, serialNumber: string, authToken: string, webSocketImplClass:any, heartbeatInterval?: number, reconnectDelay?: number) {\n\t\tthis.uri = endpoint;\n\t\tthis.appId = applicationId;\n\t\tthis.posName = posName;\n\t\tthis.serialNumber = serialNumber;\n\t\tthis.authToken = authToken;\n\t\tthis.webSocketImplClass = webSocketImplClass;\n\t\tif (heartbeatInterval) this.heartbeatInterval = Math.max(100, heartbeatInterval);\n\t\tif (reconnectDelay) this.reconnectDelay = Math.max(100, reconnectDelay);\n\t}\n\n\tpublic getApplicationId(): string {\n\t\treturn this.appId;\n\t}\n\n\tpublic getHeartbeatInterval(): number {\n\t\treturn this.heartbeatInterval;\n\t}\n\n\tpublic setHeartbeatInterval(heartbeatInterval: number): void {\n\t\tthis.heartbeatInterval = heartbeatInterval;\n\t}\n\n\tpublic getReconnectDelay(): number {\n\t\treturn this.reconnectDelay;\n\t}\n\n\tpublic setReconnectDelay(reconnectDelay: number): void {\n\t\tthis.reconnectDelay = reconnectDelay;\n\t}\n\n\tpublic getPingRetryCountBeforeReconnect(): number {\n\t\treturn this.pingRetryCountBeforeReconnect;\n\t}\n\n\tpublic setPingRetryCountBeforeReconnect(pingRetryCountBeforeReconnect: number): void {\n\t\tthis.pingRetryCountBeforeReconnect = pingRetryCountBeforeReconnect;\n\t}\n\n\tpublic getCloverDeviceTypeName(): string {\n\t\treturn 'DefaultCloverDevice';\n\t}\n\n\tpublic getMessagePackageName(): string {\n\t\treturn 'com.clover.remote_protocol_broadcast.app';\n\t}\n\n\tpublic getName(): string {\n\t\treturn 'Clover Secure WebSocket Connector';\n\t}\n\n\tpublic getCloverTransport(): CloverTransport {\n\t\treturn new WebSocketCloverTransport(\n\t\t\tthis.uri,\n\t\t\tthis.heartbeatInterval,\n\t\t\tthis.reconnectDelay,\n\t\t\tthis.pingRetryCountBeforeReconnect,\n\t\t\tthis.posName,\n\t\t\tthis.serialNumber,\n\t\t\tthis.authToken,\n\t\t\tthis.webSocketImplClass);\n\t}\n}\n"]}