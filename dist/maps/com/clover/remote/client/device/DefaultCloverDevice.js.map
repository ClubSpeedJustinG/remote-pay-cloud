{"version":3,"sources":["com/clover/remote/client/device/DefaultCloverDevice.ts"],"names":[],"mappings":"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","file":"../../../../../../com/clover/remote/client/device/DefaultCloverDevice.js","sourcesContent":["import sdk = require('remote-pay-cloud-api');\nimport {CloverDevice} from './CloverDevice';\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {ObjectMessageSender} from '../transport/ObjectMessageSender';\nimport {CloverTransportObserver} from '../transport/CloverTransportObserver';\nimport {CloverDeviceConfiguration} from './CloverDeviceConfiguration';\nimport { Logger } from '../util/Logger';\n\n/**\n * Default Clover Device\n * \n * This is a default implementation of the clover device.\n */\nexport class DefaultCloverDevice extends CloverDevice implements CloverTransportObserver, ObjectMessageSender {\n    private static REMOTE_SDK: string = 'com.clover.cloverconnector.java:1.1.1.B';\n\n    private logger: Logger = Logger.create();\n\n    private static id: number = 0;\n\n    private msgIdToTask: { [key: string]: Function; } = {};\n\n    constructor(configuration: CloverDeviceConfiguration);\n\tconstructor(packageName: string, transport: CloverTransport, applicationId: string);\n    constructor(configOrPackageName: any, transport?: CloverTransport, applicationId?: string) {\n        super(\n            typeof(configOrPackageName) == 'string' ?\n                configOrPackageName :\n                configOrPackageName.getMessagePackageName(),\n            typeof(configOrPackageName) == 'string' ?\n                transport :\n                configOrPackageName.getCloverTransport(),\n            typeof(configOrPackageName) == 'string' ?\n                applicationId :\n                configOrPackageName.getApplicationId());\n\t\tthis.transport.subscribe(this);\n        this.transport.setObjectMessageSender(this);\n\t}\n\n    /**\n     * Device is there but not yet ready for use\n     * \n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceConnected(transport: CloverTransport): void {\n        this.notifyObserversConnected(transport);\n    }\n\n    /**\n     * Device is there and ready for use\n     * \n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceReady(transport: CloverTransport): void {\n        this.doDiscoveryRequest();\n    }\n\n    /**\n     * Device is not there anymore\n     * \n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceDisconnected(transport: CloverTransport): void {\n        this.notifyObserversDisconnected(transport);\n    }\n\n    public getApplicationId(): string {\n        return this.applicationId;\n    }\n\n    /**\n     * Called when a raw message is received from the device\n     * \n     * @param {string} message - the raw message from the device\n     */\n    public onMessage(message: string): void {\n        this.logger.debug('onMessage: ' + message);\n        try {\n            // Parse the message\n            let rMessage: sdk.remotemessage.RemoteMessage = JSON.parse(message);\n            let method: sdk.remotemessage.Method = null;\n            try {\n                let msgType: sdk.remotemessage.RemoteMessage.Type = rMessage.type;\n                if (msgType == sdk.remotemessage.RemoteMessage.Type.PING) {\n                    this.sendPong(rMessage);\n                }\n                else if (msgType == sdk.remotemessage.RemoteMessage.Type.COMMAND) {\n                    method = sdk.remotemessage.Method[rMessage.method];\n                    if (method == null) {\n                        this.logger.error('Unsupported method type: ' + rMessage.method);\n                    }\n                    else {\n                        switch(method) {\n                            case sdk.remotemessage.Method.BREAK:\n                                break;\n                            case sdk.remotemessage.Method.CASHBACK_SELECTED:\n                                this.notifyObserversCashbackSelected(<sdk.remotemessage.CashBackSelectedMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.ACK:\n                                this.notifyObserverAck(<sdk.remotemessage.AcknowledgementMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.DISCOVERY_RESPONSE:\n                                this.logger.debug('Got a Discovery Response');\n                                this.notifyObserversReady(this.transport, <sdk.remotemessage.DiscoveryResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE:\n                                this.notifyObserversConfirmPayment(<sdk.remotemessage.ConfirmPaymentMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.FINISH_CANCEL:\n                                this.notifyObserversFinishCancel();\n                                break;\n                            case sdk.remotemessage.Method.FINISH_OK:\n                                this.notifyObserversFinishOk(<sdk.remotemessage.FinishOkMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.KEY_PRESS:\n                                this.notifyObserversKeyPressed(<sdk.remotemessage.KeyPressMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.ORDER_ACTION_RESPONSE:\n                                break;\n                            case sdk.remotemessage.Method.PARTIAL_AUTH:\n                                this.notifyObserversPartialAuth(<sdk.remotemessage.PartialAuthMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.PAYMENT_VOIDED:\n                                // currently this only gets called during a TX, so falls outside our current process flow\n                                //PaymentVoidedMessage vpMessage = (PaymentVoidedMessage) Message.fromJsonString(rMessage.payload);\n                                //this.notifyObserversPaymentVoided(vpMessage.payment, vpMessage.voidReason, ResultStatus.SUCCESS, null, null);\n                                break;\n                            case sdk.remotemessage.Method.TIP_ADDED:\n                                this.notifyObserversTipAdded(<sdk.remotemessage.TipAddedMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.TX_START_RESPONSE:\n                                this.notifyObserverTxStart(<sdk.remotemessage.TxStartResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.TX_STATE:\n                                this.notifyObserversTxState(<sdk.remotemessage.TxStateMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.UI_STATE:\n                                this.notifyObserversUiState(<sdk.remotemessage.UiStateMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.VERIFY_SIGNATURE:\n                                this.notifyObserversVerifySignature(<sdk.remotemessage.VerifySignatureMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.REFUND_RESPONSE:\n                                this.notifyObserversPaymentRefundResponse(<sdk.remotemessage.RefundResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.REFUND_REQUEST:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.TIP_ADJUST_RESPONSE:\n                                this.notifyObserversTipAdjusted(<sdk.remotemessage.TipAdjustResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.VAULT_CARD_RESPONSE:\n                                this.notifyObserverVaultCardResponse(<sdk.remotemessage.VaultCardResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE:\n                                this.notifyObserversCapturePreAuth(<sdk.remotemessage.CapturePreAuthResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.CLOSEOUT_RESPONSE:\n                                this.notifyObserversCloseout(<sdk.remotemessage.CloseoutResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE:\n                                this.notifyObserversPendingPaymentsResponse(<sdk.remotemessage.RetrievePendingPaymentsResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.CARD_DATA_RESPONSE:\n                                this.notifyObserversReadCardData(<sdk.remotemessage.CardDataResponseMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.DISCOVERY_REQUEST:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.PRINT_IMAGE:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.PRINT_TEXT:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.PRINT_CREDIT:\n                                this.notifyObserversPrintCredit(<sdk.remotemessage.CreditPrintMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.PRINT_CREDIT_DECLINE:\n                                this.notifyObserversPrintCreditDecline(<sdk.remotemessage.DeclineCreditPrintMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.PRINT_PAYMENT:\n                                this.notifyObserversPrintPayment(<sdk.remotemessage.PaymentPrintMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.PRINT_PAYMENT_DECLINE:\n                                this.notifyObserversPrintPaymentDecline(<sdk.remotemessage.DeclinePaymentPrintMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.PRINT_PAYMENT_MERCHANT_COPY:\n                                this.notifyObserversPrintMerchantCopy(<sdk.remotemessage.PaymentPrintMerchantCopyMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.REFUND_PRINT_PAYMENT:\n                                this.notifyObserversPrintMessage(<sdk.remotemessage.RefundPaymentPrintMessage>JSON.parse(rMessage.payload));\n                                break;\n                            case sdk.remotemessage.Method.SHOW_ORDER_SCREEN:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.SHOW_THANK_YOU_SCREEN:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.SHOW_WELCOME_SCREEN:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.SIGNATURE_VERIFIED:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.TERMINAL_MESSAGE:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.TX_START:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.VOID_PAYMENT:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.CAPTURE_PREAUTH:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.LAST_MSG_REQUEST:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.LAST_MSG_RESPONSE:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.TIP_ADJUST:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.OPEN_CASH_DRAWER:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.VAULT_CARD:\n                                //Outbound no-op\n                                break;\n                            case sdk.remotemessage.Method.CLOSEOUT_REQUEST:\n                                //Outbound no-op\n                                break;\n                            default:\n                                this.logger.error('COMMAND not supported with method: ' + rMessage.method);\n                                break;\n                        }\n                    }\n                }\n                else {\n                    this.logger.error('Unsupported message type: ' + rMessage.type.toString());\n                }\n            }\n            catch(eM) {\n                this.logger.error('Error processing message: ' + rMessage.payload, eM);\n            }\n        }\n        catch(e) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * Send a PONG response\n     * \n     * @param pingMessage \n     */\n    private sendPong(pingMessage: sdk.remotemessage.RemoteMessage): void {\n        let remoteMessage: sdk.remotemessage.RemoteMessage = new sdk.remotemessage.RemoteMessage(null, sdk.remotemessage.RemoteMessage.Type.PONG, this.packageName, null, null, DefaultCloverDevice.REMOTE_SDK, this.applicationId);\n        this.logger.debug('Sending PONG...');\n        this.sendRemoteMessage(remoteMessage);\n    }\n\n    /**\n     * Notify the observers that the device is connected\n     * \n     * @param transport \n     */\n    private notifyObserversConnected(transport: CloverTransport): void {\n\t\tthis.deviceObservers.forEach((obs) => {\n\t\t\tobs.onDeviceConnected(this);\n\t\t});\n    }\n\n    /**\n     * Notify the observers that the device has disconnected\n     * \n     * @param transport \n     */\n    private notifyObserversDisconnected(transport: CloverTransport): void {\n\t\tthis.deviceObservers.forEach((obs) => {\n\t\t\tobs.onDeviceDisconnected(this);\n\t\t});\n    }\n\n    /**\n     * Notify the observers that the device is ready\n     * \n     * @param transport \n     */\n    private notifyObserversReady(transport: CloverTransport, drm: sdk.remotemessage.DiscoveryResponseMessage): void {\n\t\tthis.deviceObservers.forEach((obs) => {\n\t\t\tobs.onDeviceReady(this, drm);\n\t\t});\n    }\n\n    private notifyObserverAck(ackMessage: sdk.remotemessage.AcknowledgementMessage): void {\n        let ackTask = this.msgIdToTask[ackMessage.sourceMessageId];\n        if (ackTask !== null) {\n            delete this.msgIdToTask[ackMessage.sourceMessageId];\n            ackTask.call(null);\n        }\n        // go ahead and notify listeners of the ACK\n        this.deviceObservers.forEach((obs) => {\n            obs.onMessageAck(ackMessage.sourceMessageId);\n        });\n    }\n\n    private notifyObserversReadCardData(rcdrm: sdk.remotemessage.CardDataResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onReadCardResponse(rcdrm.status, rcdrm.reason, rcdrm.cardData);\n        });\n    }\n\n    private notifyObserversPrintMessage(rppm: sdk.remotemessage.RefundPaymentPrintMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintRefundPayment(rppm.payment, rppm.order, rppm.refund);\n        });\n    }\n\n    private notifyObserversPrintMerchantCopy(ppmcm: sdk.remotemessage.PaymentPrintMerchantCopyMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintMerchantReceipt(ppmcm.payment);\n        });\n    }\n\n    private notifyObserversPrintPaymentDecline(dppm: sdk.remotemessage.DeclinePaymentPrintMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintPaymentDecline(dppm.payment, dppm.reason);\n        });\n    }\n\n    private notifyObserversPrintPayment(ppm: sdk.remotemessage.PaymentPrintMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintPayment(ppm.payment, ppm.order);\n        });\n    }\n\n    private notifyObserversPrintCredit(cpm: sdk.remotemessage.CreditPrintMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintCredit(cpm.credit);\n        });\n    }\n\n    private notifyObserversPrintCreditDecline(dcpm: sdk.remotemessage.DeclineCreditPrintMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintCreditDecline(dcpm.credit, dcpm.reason);\n        });\n    }\n\n    //---------------------------------------------------\n    /// <summary>\n    /// this is for a payment refund\n    /// </summary>\n    /// <param name=\"rrm\"></param>\n    public notifyObserversPaymentRefundResponse(rrm: sdk.remotemessage.RefundResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPaymentRefundResponse(rrm.orderId, rrm.paymentId, rrm.refund, rrm.code);\n        });\n    }\n\n    public notifyObserversKeyPressed(keyPress: sdk.remotemessage.KeyPressMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onKeyPressed(keyPress.keyPress);\n        });\n    }\n\n    public notifyObserversCashbackSelected(cbSelected: sdk.remotemessage.CashbackSelectedMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCashbackSelected(cbSelected.cashbackAmount);\n        });\n    }\n\n    public notifyObserversTipAdded(tipAdded: sdk.remotemessage.TipAddedMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTipAdded(tipAdded.tipAmount);\n        });\n    }\n\n    public notifyObserverTxStart(txsrm: sdk.remotemessage.TxStartResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTxStartResponse(txsrm.result, txsrm.externalPaymentId);\n        });\n    }\n\n    public notifyObserversTipAdjusted(tarm: sdk.remotemessage.TipAdjustResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onAuthTipAdjusted(tarm.paymentId, tarm.amount, tarm.success);\n        });\n    }\n\n    public notifyObserversPartialAuth(partialAuth: sdk.remotemessage.PartialAuthMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPartialAuth(partialAuth.partialAuthAmount);\n        });\n    }\n\n    public notifyObserversPaymentVoided(payment: sdk.payments.Payment, voidReason: sdk.order.VoidReason, result: sdk.remotemessage.ResultStatus, reason: string, message: string): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPaymentVoided(payment, voidReason, result, reason, message);\n        });\n    }\n\n    public notifyObserversVerifySignature(verifySigMsg: sdk.remotemessage.VerifySignatureMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onVerifySignature(verifySigMsg.payment, verifySigMsg.signature);\n        });\n    }\n\n    public notifyObserversConfirmPayment(confirmPaymentMessage: sdk.remotemessage.ConfirmPaymentMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onConfirmPayment(confirmPaymentMessage.payment, confirmPaymentMessage.challenges);\n        });\n    }\n\n    public notifyObserverVaultCardResponse(vaultCardResponseMessage: sdk.remotemessage.VaultCardResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onVaultCardResponse(vaultCardResponseMessage.card, vaultCardResponseMessage.status.tostring(), vaultCardResponseMessage.reason);\n        });\n    }\n\n    public notifyObserversUiState(uiStateMsg: sdk.remotemessage.UiStateMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onUiState(uiStateMsg.uiState, uiStateMsg.uiText, uiStateMsg.uiDirection, uiStateMsg.inputOptions);\n        });\n    }\n\n    public notifyObserversCapturePreAuth(cparm: sdk.remotemessage.CapturePreAuthResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCapturePreAuth(cparm.status, cparm.reason, cparm.paymentId, cparm.amount, cparm.tipAmount);\n        });\n    }\n\n    public notifyObserversCloseout(crm: sdk.remotemessage.CloseoutResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCloseoutResponse(crm.status, crm.reason, crm.batch);\n        });\n    }\n\n    public notifyObserversPendingPaymentsResponse(rpprm: sdk.remotemessage.RetrievePendingPaymentsResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPendingPaymentsResponse(rpprm.status == sdk.remotemessage.ResultStatus.SUCCESS, rpprm.pendingPaymentEntries);\n        });\n    }\n\n    public notifyObserversTxState(txStateMsg: sdk.remotemessage.TxStateMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTxState(txStateMsg.txState);\n        });\n    }\n\n    public notifyObserversFinishCancel(): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onFinishCancel();\n        });\n    }\n\n    public notifyObserversFinishOk(msg: sdk.remotemessage.FinishOkMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            if (msg.payment !== null) {\n                obs.onFinishOk(msg.payment, msg.signature);\n            } else if (msg.credit !== null) {\n                obs.onFinishOk(msg.credit);\n            } else if (msg.refund !== null) {\n                obs.onFinishOk(msg.refund);\n            }\n        });\n    }\n\n\t/**\n\t * Show Payment Receipt Screen\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t */\n\tpublic doShowPaymentReceiptScreen(orderId: string, paymentId: string): void {\n        this.sendObjectMessage(new sdk.remotemessage.ShowPaymentReceiptOptionsMessage(orderId, paymentId, 2));\n    }\n\n\t/**\n\t * Key Press\n\t * \n\t * @param {KeyPress} keyPress \n\t */\n\tpublic doKeyPress(keyPress: sdk.remotemessage.KeyPress): void {\n        this.sendObjectMessage(new sdk.remotemessage.KeyPressMessage(keyPress));\n    }\n\n\t/**\n\t * Show Thank You Screen\n\t */\n\tpublic doShowThankYouScreen(): void {\n        this.sendObjectMessage(new sdk.remotemessage.ThankYouMessage());\n    }\n\n\t/**\n\t * Show Welcome Screen\n\t */\n\tpublic doShowWelcomeScreen(): void {\n        this.sendObjectMessage(new sdk.remotemessage.WelcomeMessage());\n    }\n\n\t/**\n\t * Signature Verified\n\t * \n\t * @param {Payment} payment \n\t * @param {boolean} verified \n\t */\n\tpublic doSignatureVerified(payment: sdk.payments.Payment, verified: boolean): void {\n        this.sendObjectMessage(new sdk.remotemessage.SignatureVerifiedMessage(payment, verified));\n    }\n\n\t/**\n\t * Retrieve Pending Payments\n\t */\n\tpublic doRetrievePendingPayments(): void {\n        this.sendObjectMessage(new sdk.remotemessage.RetrievePendingPaymentsMessage());\n    }\n\n\t/**\n\t * Terminal Message\n\t * \n\t * @param {string} text \n\t */\n\tpublic doTerminalMessage(text: string): void {\n        this.sendObjectMessage(new sdk.remotemessage.TerminalMessage(text));\n    }\n\n\t/**\n\t * Open Cash Drawer\n\t * \n\t * @param {string} reason \n\t */\n\tpublic doOpenCashDrawer(reason: string): void {\n        this.sendObjectMessage(new sdk.remotemessage.OpenCashDrawerMessage(reason));\n    }\n\n\t/**\n\t * Closeout\n\t * \n\t * @param {boolean} allowOpenTabs \n\t * @param {string} batchId \n\t */\n\tpublic doCloseout(allowOpenTabs: boolean, batchId: string): void {\n        this.sendObjectMessage(new sdk.remotemessage.CloseoutRequestMessage(allowOpenTabs, batchId));\n    }\n\n\t/**\n\t * Transaction Start\n\t * \n\t * @param {PayIntent} payIntent \n\t * @param {Order} order \n\t * @param {boolean} suppressTipScreen \n\t */\n\tpublic doTxStart(payIntent: sdk.remotemessage.PayIntent, order: sdk.order.Order, suppressTipScreen: boolean): void {\n        this.sendObjectMessage(new sdk.remotemessage.TxStartRequestMessage(payIntent, order, suppressTipScreen));\n    }\n\n\t/**\n\t * Tip Adjust Auth\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t */\n\tpublic doTipAdjustAuth(orderId: string, paymentId: string, amount: number): void {\n        this.sendObjectMessage(new sdk.remotemessage.TipAdjustMessage(orderId, paymentId, amount));\n    }\n\n\t/**\n\t * Read Cart Data\n\t * \n\t * @param {PayIntent} payment \n\t */\n\tpublic doReadCardData(payment: sdk.remotemessage.PayIntent): void {\n        this.sendObjectMessage(new sdk.remotemessage.CardDataRequestMessage(payment));\n    }\n\n\t/**\n\t * Print Text\n\t * \n\t * @param {Array<string>} textLines \n\t */\n\tpublic doPrintText(textLines: Array<string>): void {\n        this.sendObjectMessage(new sdk.remotemessage.TextPrintMessage(textLines));\n    }\n\n\t/**\n\t * Print Image (Bitmap)\n\t * \n\t * @param {byte[]} bitmap \n\t */\n\tpublic doPrintImage(bitmap: number[]): void;\n\t/**\n\t * Print Image (URL)\n\t * \n\t * @param {string} url \n\t */\n\tpublic doPrintImage(url: string): void;\n\tpublic doPrintImage(value: number[] | string): void {\n        this.sendObjectMessage(new sdk.remotemessage.ImagePrintMessage(value));\n    }\n\n\t/**\n\t * Void Payment\n\t * \n\t * @param {Payment} payment \n\t * @param {VoidReason} reason \n\t */\n\tpublic doVoidPayment(payment: sdk.payments.Payment, reason: sdk.order.VoidReason): void {\n        let msgId: string = this.sendObjectMessage(new sdk.remotemessage.VoidPaymentMessage(payment, reason));\n\n        if (!this.supportsAcks()) {\n            this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);\n        }\n        else {\n            // we will send back response after we get an ack\n            this.msgIdToTask[msgId] = () => {\n                this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);\n            };\n        }\n    }\n\n\t/**\n\t * Payment Refund\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t * @param {boolean} fullRefund \n\t */\n\tpublic doPaymentRefund(orderId: string, paymentId: string, amount: number, fullRefund: boolean): void {\n        this.sendObjectMessage_opt_version(new sdk.remotemessage.RefundRequestMessage(orderId, paymentId, amount, fullRefund), 2);\n    }\n\n\t/**\n\t * Vault Card\n\t * \n\t * @param {number} cardEntryMethods \n\t */\n\tpublic doVaultCard(cardEntryMethods: number): void {\n        this.sendObjectMessage(new sdk.remotemessage.VaultCardMessage(cardEntryMethods));\n    }\n\n\t/**\n\t * Capture Auth\n\t * \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t * @param {number} tipAmount \n\t */\n\tpublic doCaptureAuth(paymentId: string, amount: number, tipAmount: number): void {\n        this.sendObjectMessage(new sdk.remotemessage.CapturePreAuthMessage(paymentId, amount, tipAmount));\n    }\n\n\t/**\n\t * Accept Payment\n\t * \n\t * @param {Payment} payment \n\t */\n\tpublic doAcceptPayment(payment: sdk.payments.Payment): void {\n        this.sendObjectMessage(new sdk.remotemessage.PaymentConfirmedMessage(payment));\n    }\n\n\t/**\n\t * Reject Payment\n\t * \n\t * @param {Payment} payment \n\t * @param {Challenge} challenge \n\t */\n\tpublic doRejectPayment(payment: sdk.payments.Payment, challenge: sdk.base.Challenge): void {\n        this.sendObjectMessage(new sdk.remotemessage.PaymentRejectedMessage(payment, challenge.reason));\n    }\n\n\t/**\n\t * Discovery request\n\t */\n\tpublic doDiscoveryRequest(): void {\n        this.sendObjectMessage(new sdk.remotemessage.DiscoverRequestMessage(false));\n    }\n\n\t/**\n\t * Order Update\n\t * \n\t * @param {DisplayOrder} order \n\t * @param {any} orderOperation \n\t */\n\tpublic doOrderUpdate(order: sdk.order.DisplayOrder, orderOperation: any): void {\n        if (orderOperation instanceof sdk.order.operation.DiscountsAddedOperation ||\n            orderOperation instanceof sdk.order.operation.DiscountsDeletedOperation ||\n            orderOperation instanceof sdk.order.operation.LineItemsAddedOperation ||\n            orderOperation instanceof sdk.order.operation.LineItemsDeletedOperation ||\n            orderOperation instanceof sdk.order.operation.OrderDeletedOperation) {\n            this.sendObjectMessage(new sdk.remotemessage.OrderUpdateMessage(order, orderOperation));\n        }\n        else {\n            this.sendObjectMessage(new sdk.remotemessage.OrderUpdateMessage(order));\n        }\n    }\n\n\t/**\n\t * Reset Device\n\t */\n\tpublic doResetDevice(): void {\n        this.sendObjectMessage(new sdk.remotemessage.BreakMessage());\n    }\n\n\t/**\n\t * Dispose\n\t */\n\tpublic dispose(): void {\n        this.deviceObservers.splice(0, this.deviceObservers.length);\n        if (this.transport !== null) {\n            this.transport.dispose();\n            this.transport = null;\n        }\n    }\n\n    /**\n     * Send the message to the device using the transport\n     * \n     * @param message \n     * @param version\n     */\n    public sendObjectMessage(message: sdk.remotemessage.Message): string {\n        return this.sendObjectMessage_opt_version(message);\n    }\n    private sendObjectMessage_opt_version(message: sdk.remotemessage.Message, version?: number): string {\n        // Default to version 1\n        if (version == null) version = 1;\n\n        // Make sure the message is not null\n        if (message == null) {\n            this.logger.debug('Message is null');\n            return null;\n        }\n\n        // Check the message method\n        this.logger.info(message.tostring());\n        if (message.method == null) {\n            this.logger.error('Invalid Message', new Error('Invalid Message: ' + message.tostring()));\n            return null;\n        }\n\n        // Check the application id\n        if (this.applicationId == null) {\n            this.logger.error('Invalid ApplicationID: ' + this.applicationId);\n            throw new Error('Invalid applicationId');\n        }\n\n        let messageId: string = (++DefaultCloverDevice.id) + '';\n        let remoteMessage: sdk.remotemessage.RemoteMessage = new sdk.remotemessage.RemoteMessage(messageId, sdk.remotemessage.RemoteMessage.Type.COMMAND, this.packageName, message.method.tostring(), JSON.stringify(message), DefaultCloverDevice.REMOTE_SDK, this.applicationId);\n        this.sendRemoteMessage(remoteMessage);\n        return messageId;\n    }\n\n    private sendRemoteMessage(remoteMessage: sdk.remotemessage.RemoteMessage): void {\n        let msg = JSON.stringify(remoteMessage);\n        this.logger.debug('Sending: ' + msg);\n        this.transport.sendMessage(msg);\n    }\n}\n"]}