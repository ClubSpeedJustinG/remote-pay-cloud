{"version":3,"sources":["com/clover/remote/client/device/CloverDeviceFactory.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AAEtC;;;;GAIG;AACH;IACC;IACA,CAAC;IAED;;;;;OAKG;IACI,uBAAG,GAAV,UAAW,aAAa;QACvB,IAAI,gBAAgB,GAAG,aAAa,CAAC,uBAAuB,EAAE,CAAC;QAE/D,0CAA0C;QAC1C,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,CAAC;YACJ,EAAE,GAAG,OAAO,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC,aAAa,CAAC,CAAC;QACtD,CAAC;QACD,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,eAAM,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QAED,oCAAoC;QACpC,MAAM,CAAC,EAAE,CAAC;IACX,CAAC;IACF,0BAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,kDAAmB","file":"../../../../../../com/clover/remote/client/device/CloverDeviceFactory.js","sourcesContent":["import {Logger} from '../util/Logger';\n\n/**\n * Clover Device Factory\n * \n * The clover device factory returns new clover devices.\n */\nexport class CloverDeviceFactory {\n\tconstructor() {\n\t}\n\n\t/**\n\t * Returns a new clover device based on the configuration\n\t * \n\t * @param {CloverDeviceConfiguration} configuration \n\t * @returns CloverDevice\n\t */\n\tstatic get(configuration) {\n\t\tvar cloverDeviceName = configuration.getCloverDeviceTypeName();\n\n\t\t// Try to get the requested clover device.\n\t\tvar cd = null;\n\t\ttry {\n\t\t\tcd = require('./' + cloverDeviceName)(configuration);\n\t\t}\n\t\tcatch(e) {\n\t\t\tLogger.create().error(e);\n\t\t}\n\n\t\t// Return the clover device or null.\n\t\treturn cd;\n\t}\n}\n"]}