{"version":3,"sources":["com/clover/remote/client/device/CloverDevice.ts"],"names":[],"mappings":";;AAIA;;;;GAIG;AACH;IAQC;;;;;;OAMG;IACH,sBAAY,WAAmB,EAAE,SAA0B,EAAE,aAAqB;QATxE,gBAAW,GAAY,KAAK,CAAC;QAUtC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,gCAAS,GAAhB,UAAiB,QAA8B;QAC9C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACI,kCAAW,GAAlB,UAAmB,QAA8B;QAChD,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC;IACF,CAAC;IAoLD;;;;OAIG;IACI,sCAAe,GAAtB,UAAuB,WAAoB;QAC1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACI,mCAAY,GAAnB;QACC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IACF,mBAAC;AAAD,CA/OA,AA+OC,IAAA;AA/OqB,oCAAY","file":"../../../../../../com/clover/remote/client/device/CloverDevice.js","sourcesContent":["import sdk = require('remote-pay-cloud-api');\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {CloverDeviceObserver} from '../CloverDeviceObserver';\n\n/**\n * Clover Device\n * \n * Abstract clover device.\n */\nexport abstract class CloverDevice {\n\tprotected deviceObservers: CloverDeviceObserver[];\n\n\tprotected transport: CloverTransport;\n\tprotected packageName: string;\n\tprotected applicationId: string;\n\tprotected supportsAck: boolean = false;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param {string} packageName \n\t * @param {CloverTransport} transport \n\t * @param {string} applicationId \n\t */\n\tconstructor(packageName: string, transport: CloverTransport, applicationId: string) {\n\t\tthis.packageName = packageName;\n\t\tthis.transport = transport;\n\t\tthis.applicationId = applicationId;\n\t\tthis.deviceObservers = [];\n\t\tthis.supportsAck = false;\n\t}\n\n\t/**\n\t * Add a new observer to the list of observers\n\t * \n\t * @param {CloverDeviceObserver} observer - observer to add\n\t */\n\tpublic subscribe(observer: CloverDeviceObserver): void {\n\t\tthis.deviceObservers.push(observer);\n\t}\n\n\t/**\n\t * Remove an observer from the list of observers\n\t * \n\t * @param {CloverDeviceObserver} observer - observer to remove\n\t */\n\tpublic unsubscribe(observer: CloverDeviceObserver): void {\n\t\tvar indexOfObserver = this.deviceObservers.indexOf(observer);\n\t\tif (indexOfObserver !== -1) {\n\t\t\tthis.deviceObservers.splice(indexOfObserver, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Discovery request\n\t */\n\tpublic abstract doDiscoveryRequest(): void;\n\n\t/**\n\t * Transaction Start\n\t * \n\t * @param {PayIntent} payIntent \n\t * @param {Order} order \n\t * @param {boolean} suppressTipScreen \n\t */\n\tpublic abstract doTxStart(payIntent: sdk.remote.PayIntent, order: sdk.remote.Order, suppressTipScreen: boolean): void;\n\n\t/**\n\t * Key Press\n\t * \n\t * @param {KeyPress} keyPress \n\t */\n\tpublic abstract doKeyPress(keyPress: sdk.remote.KeyPress): void;\n\n\t/**\n\t * Void Payment\n\t * \n\t * @param {Payment} payment \n\t * @param {VoidReason} reason \n\t */\n\tpublic abstract doVoidPayment(payment: sdk.remote.Payment, reason: sdk.remote.VoidReason): void;\n\n\t/**\n\t * Capture Auth\n\t * \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t * @param {number} tipAmount \n\t */\n\tpublic abstract doCaptureAuth(paymentId: string, amount: number, tipAmount: number): void;\n\n\t/**\n\t * Order Update\n\t * \n\t * @param {DisplayOrder} order \n\t * @param {Object} orderOperation \n\t */\n\tpublic abstract doOrderUpdate(order: sdk.remote.DisplayOrder, orderOperation: Object): void;\n\n\t/**\n\t * Signature Verified\n\t * \n\t * @param {Payment} payment \n\t * @param {boolean} verified \n\t */\n\tpublic abstract doSignatureVerified(payment: sdk.remote.Payment, verified: boolean): void;\n\n\t/**\n\t * Terminal Message\n\t * \n\t * @param {string} text \n\t */\n\tpublic abstract doTerminalMessage(text: string): void;\n\n\t/**\n\t * Payment Refund\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t * @param {boolean} fullRefund \n\t */\n\tpublic abstract doPaymentRefund(orderId: string, paymentId: string, amount: number, fullRefund: boolean): void;\n\n\t/**\n\t * Tip Adjust Auth\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t * @param {number} amount \n\t */\n\tpublic abstract doTipAdjustAuth(orderId: string, paymentId: string, amount: number): void;\n\n\t/**\n\t * Print Text\n\t * \n\t * @param {Array<string>} textLines \n\t */\n\tpublic abstract doPrintText(textLines: Array<string>): void;\n\n\t/**\n\t * Show Welcome Screen\n\t */\n\tpublic abstract doShowWelcomeScreen(): void;\n\n\t/**\n\t * Show Payment Receipt Screen\n\t * \n\t * @param {string} orderId \n\t * @param {string} paymentId \n\t */\n\tpublic abstract doShowPaymentReceiptScreen(orderId: string, paymentId: string): void;\n\n\t/**\n\t * Show Thank You Screen\n\t */\n\tpublic abstract doShowThankYouScreen(): void;\n\n\t/**\n\t * Open Cash Drawer\n\t * \n\t * @param {string} reason \n\t */\n\tpublic abstract doOpenCashDrawer(reason: string): void;\n\n\t/**\n\t * Print Image (Bitmap)\n\t * \n\t * @param {byte[]} bitmap \n\t */\n\tpublic abstract doPrintImage(bitmap: number[]): void;\n\t/**\n\t * Print Image (URL)\n\t * \n\t * @param {string} url \n\t */\n\tpublic abstract doPrintImage(url: string): void;\n\tpublic abstract doPrintImage(value: number[] | string): void;\n\n\t/**\n\t * Dispose\n\t */\n\tpublic abstract dispose(): void;\n\n\t/**\n\t * Closeout\n\t * \n\t * @param {boolean} allowOpenTabs \n\t * @param {string} batchId \n\t */\n\tpublic abstract doCloseout(allowOpenTabs: boolean, batchId: string): void;\n\n\t/**\n\t * Vault Card\n\t * \n\t * @param {number} cardEntryMethods \n\t */\n\tpublic abstract doVaultCard(cardEntryMethods: number): void;\n\n\t/**\n\t * Reset Device\n\t */\n\tpublic abstract doResetDevice(): void;\n\n\t/**\n\t * Accept Payment\n\t * \n\t * @param {Payment} payment \n\t */\n\tpublic abstract doAcceptPayment(payment: sdk.remote.Payment): void;\n\n\t/**\n\t * Reject Payment\n\t * \n\t * @param {Payment} payment \n\t * @param {Challenge} challenge \n\t */\n\tpublic abstract doRejectPayment(payment: sdk.remote.Payment, challenge: sdk.remote.Challenge): void;\n\n\t/**\n\t * Retrieve Pending Payments\n\t */\n\tpublic abstract doRetrievePendingPayments(): void;\n\n\t/**\n\t * Read Cart Data\n\t * \n\t * @param {PayIntent} payment \n\t */\n\tpublic abstract doReadCardData(payment: sdk.remote.PayIntent): void;\n\n\t/**\n\t * Supports Acknowledgements\n\t * \n\t * @param {boolean} supportsAck \n\t */\n\tpublic setSupportsAcks(supportsAck: boolean): void {\n\t\tthis.supportsAck = supportsAck;\n\t}\n\n\t/**\n\t * Get Supports Acknowledgements flag\n     * \n     * @returns boolean - Flag indicating if this device supports acks\n\t */\n\tpublic supportsAcks(): boolean {\n\t\treturn this.supportsAck;\n\t}\n}\n"]}