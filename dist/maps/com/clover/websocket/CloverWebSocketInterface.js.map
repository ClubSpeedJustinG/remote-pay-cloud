{"version":3,"sources":["com/clover/websocket/CloverWebSocketInterface.ts"],"names":[],"mappings":"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","file":"../../../../com/clover/websocket/CloverWebSocketInterface.js","sourcesContent":["import {WebSocketListener} from './WebSocketListener'\nimport {WebSocketInterface} from \"./WebSocketInterface\";\nimport {WebSocketState} from './WebSocketState';\nimport {Logger} from '../remote/client/util/Logger';\n\n/**\n * WebSocket Clover Interface\n * \n * Interface to connect a websocket implementation to.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n */\nexport abstract class CloverWebSocketInterface extends Array<WebSocketListener> {\n\n    // Create a logger\n    private logger: Logger = Logger.create();\n\n    private endpoint: string;\n\n    private webSocket: WebSocketInterface;\n\n    constructor(endpoint: string) {\n        super();\n        this.endpoint = endpoint;\n    }\n\n    /**\n     * For JS impls, we need to abstract out the WebSocket so that the library can be used in\n     * browsers and non-browsers.\n     *\n     * This MUST return immediately!  It cannot use any type of promise or deferral, or the listener\n     * will not be properly attached before events begin firing.\n     *\n     * @param endpoint - the uri to connect to\n     */\n    public abstract createWebSocket(endpoint: string): WebSocketInterface;\n\n    public connect(): CloverWebSocketInterface {\n        this.webSocket = this.createWebSocket(this.endpoint);\n        this.webSocket.setOnOpen( function (event) {\n            this.notifyOnOpen(event).bind(this)\n        });\n        this.webSocket.setOnMessage( function (event) {\n            this.notifyOnClose(event).bind(this);\n        });\n        this.webSocket.setOnError( function (event) {\n            this.notifyOnClose(event).bind(this);\n        });\n        this.webSocket.setOnClose( function (event: CloseEvent) {\n            this.notifyOnClose(event).bind(this);\n        });\n        return this;\n    }\n\n    ///////\n    // https://www.w3.org/TR/2011/WD-websockets-20110419/\n    private notifyOnOpen(event: Event) {\n        this.forEach((listener: WebSocketListener) => {\n            try {\n                // check event here for any additional data we can see - headers?\n                listener.onConnected(this);\n            }\n            catch(e) {\n                this.logger.error(e);\n            }\n        });\n    }\n    private notifyOnMessage(event: MessageEvent) {\n        this.forEach((listener: WebSocketListener) => {\n            try {\n                listener.onTextMessage(this, event.data);\n            }\n            catch(e) {\n                this.logger.error(e);\n            }\n        });\n    }\n    private notifyOnError(event: Event) {\n        this.forEach((listener: WebSocketListener) => {\n            try {\n                /*\n                According to the spec, only CLOSING or OPEN should occur. This is a 'simple' event.\n                 */\n                // check event here for any additional data we can see - headers?\n                if (this.webSocket.getReadyState() == WebSocketState.CONNECTING) {\n                    listener.onConnectError(this);\n                } else if (this.webSocket.getReadyState() == WebSocketState.CLOSING) {\n                    listener.onUnexpectedError(this);\n                } else if (this.webSocket.getReadyState() == WebSocketState.CLOSED) {\n                    listener.onDisconnected(this);\n                } else if (this.webSocket.getReadyState() == WebSocketState.OPEN) {\n                    listener.onSendError(this);\n                }\n            }\n            catch(e) {\n                this.logger.error(e);\n            }\n        });\n    }\n    private notifyOnClose(event: CloseEvent) {\n        this.forEach((listener: WebSocketListener) => {\n            try {\n                listener.onCloseFrame(this, event.code, event.reason);\n            }\n            catch(e) {\n                this.logger.error(e);\n            }\n        });\n    }\n    ////////\n\n\n    public sendClose(): CloverWebSocketInterface {\n        this.webSocket.close();\n        return this;\n    }\n\n    public sendText(data: string): CloverWebSocketInterface {\n        this.webSocket.send(data);\n        return this;\n    }\n\n    public getState(): WebSocketState {\n        return this.webSocket.getReadyState()\n    }\n\n    public isOpen(): boolean {\n        return this.webSocket.getReadyState() == WebSocketState.OPEN;\n    }\n\n    public abstract sendPong(): CloverWebSocketInterface;\n    public abstract sendPing(): CloverWebSocketInterface;\n\n    addListener(listener: WebSocketListener): void {\n        this.push(listener);\n    }\n    removeListener(listener: WebSocketListener): boolean {\n        var indexOfListener = this.indexOf(listener);\n        if (indexOfListener !== -1) {\n            this.splice(indexOfListener, 1);\n            return true;\n        }\n        return false;\n    }\n    getListeners(): Array<WebSocketListener> {\n        return this.slice();\n    }\n}\n"]}